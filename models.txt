const mongoose = require('mongoose');

// ========= Media Schema =========
const mediaSchema = new mongoose.Schema({
  url: { type: String, required: true },
  public_id: { type: String, required: true },
}, { timestamps: true });

// ========= Category Schema =========
const categorySchema = new mongoose.Schema({
  name: { type: String, required: true, unique: true },
  slug: { type: String, required: true, unique: true },
  image: { type: mongoose.Schema.Types.ObjectId, ref: "Media" },
}, { timestamps: true });

// ========= Shipping Option Schema =========
const shippingOptionSchema = new mongoose.Schema({
  city: { type: String, required: true },
  toHomePrice: { type: Number, required: true },
  toOfficePrice: { type: Number, required: true },
}, { timestamps: true });

// ========= Product Schema =========
const variantSchema = new mongoose.Schema({
  name: { type: String, required: true }, // e.g., Size or Color
  options: [{ type: String, required: true }], // e.g., [S, M, L] or [Red, Blue]
});

const productSchema = new mongoose.Schema({
  title: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  description: { type: String },
  price: { type: Number, required: true },
  category: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', required: true },
  badges: [{ type: String }], // e.g., ['Promo', 'Sale']
  heroImage: { type: mongoose.Schema.Types.ObjectId, ref: 'Media' }, // Featured image
  images: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Media' }],
  variants: [variantSchema], // Size, Color, etc.
  inStock: { type: Boolean, default: true },
  stockQuantity: { type: Number, default: null }, // Optional stock management
}, { timestamps: true });

// ========= Order Schema =========
const orderSchema = new mongoose.Schema({
  customerName: { type: String, required: true },
  customerPhone: { type: String, required: true },
  customerAddress: { type: String, required: true },
  city: { type: String, required: true },
  products: [{
    product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    variantSelected: { type: String }, // optional if your product has variants
    quantity: { type: Number, default: 1 },
  }],
  shippingMethod: { type: String, enum: ['toHome', 'toOffice'], required: true },
  shippingCost: { type: Number, required: true },
  status: { 
    type: String, 
    enum: ['Pending', 'Confirmed', 'Shipped', 'Delivered', 'Cancelled'],
    default: 'Pending'
  },
  totalPrice: { type: Number, required: true }, // product price * qty + shipping
}, { timestamps: true });

// ========= Export Models =========
const Media = mongoose.model('Media', mediaSchema);
const Category = mongoose.model('Category', categorySchema);
const ShippingOption = mongoose.model('ShippingOption', shippingOptionSchema);
const Product = mongoose.model('Product', productSchema);
const Order = mongoose.model('Order', orderSchema);

module.exports = {
  Media,
  Category,
  ShippingOption,
  Product,
  Order,
};
